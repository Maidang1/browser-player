1
00:00:00,880 --> 00:00:08,680
Hello and welcome to this course on React Query, which is a library for server state management for

2
00:00:08,680 --> 00:00:09,340
REACT.

3
00:00:09,850 --> 00:00:12,250
I'm so glad you've decided to take this course.

4
00:00:14,550 --> 00:00:21,930
I want to start out by talking about how I discovered react query, I was coding my Web site and I wanted

5
00:00:21,930 --> 00:00:24,660
to be able to add coupons to courses.

6
00:00:24,660 --> 00:00:28,170
So I have courses on my Web site and I wanted to be able to add coupons.

7
00:00:29,580 --> 00:00:33,630
And the way the site is structured, coupons aren't loaded separately.

8
00:00:33,870 --> 00:00:36,690
You load courses and the coupons come with them.

9
00:00:38,430 --> 00:00:44,940
So I wanted to update the courses, the on the website, I wanted to update the course information from

10
00:00:44,940 --> 00:00:47,280
the server after I added a coupon.

11
00:00:51,370 --> 00:00:58,410
My first attempt was to manage this with Redox and let me tell you, it was not simple.

12
00:00:58,930 --> 00:01:08,590
I had to maintain state and use actions to make sure that I refer to the courses whenever I did an update

13
00:01:08,590 --> 00:01:09,700
for the coupons.

14
00:01:13,190 --> 00:01:19,340
Then I remembered hearing something about react query, and I wondered whether this might help in my

15
00:01:19,340 --> 00:01:25,050
situation, so I decided to give it a try and it was just easy.

16
00:01:25,850 --> 00:01:27,260
I updated a coupon.

17
00:01:28,250 --> 00:01:36,080
Then after the coupon update was successful, I invalidated the course data from the server and then

18
00:01:36,080 --> 00:01:36,950
react query.

19
00:01:36,950 --> 00:01:38,860
Did it automatically fetch?

20
00:01:39,650 --> 00:01:43,130
This tool was billed for exactly this type of problem.

21
00:01:46,630 --> 00:01:55,210
More specifically, react query, it maintains server state on the client.

22
00:01:57,120 --> 00:02:02,400
So when you fetch your server data, you do it through react query.

23
00:02:04,790 --> 00:02:11,210
Your job is to react, Quirino, when it needs to refresh the data in the cash.

24
00:02:13,050 --> 00:02:20,520
You can do it immediately by invalidating data like I did with my courses when I updated a coupon,

25
00:02:20,520 --> 00:02:26,010
I invalidated the courses to let React Quirino it needed to refresh that data.

26
00:02:27,450 --> 00:02:36,450
Or you can mark data as stale, you can tell react query when data is stale, and then there are triggers

27
00:02:36,450 --> 00:02:42,090
to refresh data when it's stale, for example, when the window is refocussed.

28
00:02:47,750 --> 00:02:57,410
So that's the basic function of react query is to maintain server state on the client, but you also

29
00:02:57,410 --> 00:03:07,140
get loading and error status while the data is being fetched, you get pagination an infinite scroll.

30
00:03:07,160 --> 00:03:12,860
There are tools for that with react query that will look at in this course prefixing.

31
00:03:12,860 --> 00:03:18,320
I have a little crystal ball here because if you anticipate what data your customer might need, your

32
00:03:18,320 --> 00:03:21,740
user might need, then you can pre fetch it.

33
00:03:21,740 --> 00:03:24,740
So it's there and the user doesn't have to wait for it.

34
00:03:26,240 --> 00:03:34,430
Mutation's, here's my poor mutant human with green skin, you can mutate data on the server through

35
00:03:34,430 --> 00:03:35,270
react query.

36
00:03:37,360 --> 00:03:45,490
Deduplication of requests, so by maintaining this cache of data on the server, you can have different

37
00:03:45,490 --> 00:03:52,270
components, be asking for the same data and not have to worry that you're pinging the server over and

38
00:03:52,270 --> 00:03:53,440
over needlessly.

39
00:03:55,940 --> 00:03:57,830
There's retry on error.

40
00:03:59,350 --> 00:04:07,510
And then there are callbacks, you can run callbacks on a successful fetch of data from the server,

41
00:04:07,870 --> 00:04:14,170
you can run a callback on an error, you can run callbacks on settled meaning whether when when the

42
00:04:14,170 --> 00:04:18,490
whole thing is done, whether it was an error or successful and so forth.

43
00:04:18,490 --> 00:04:27,610
And so this all combines into a very valuable, very smart tool to be able to do what you need to do

44
00:04:27,610 --> 00:04:29,620
with server state on your client.

45
00:04:31,990 --> 00:04:37,720
All right, join me in the next lecture where I will introduce how this course is structured.
